generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Election {
  id               String        @id @default(uuid())
  organization     Organization  @relation(fields: [organization_id], references: [id])
  organization_id  String
  election_type    ElectionType  @relation(fields: [election_type_id], references: [id])
  election_type_id Int
  name             String
  slug             String
  description      String?
  start_at         DateTime
  end_at           DateTime?
  propositions     Proposition[]
  ballots          Ballot[]
  votes            Vote[]
}

model ElectionType {
  id       Int        @id @default(autoincrement())
  type     String
  Election Election[]
}

model Organization {
  id                       String                   @id @default(uuid())
  name                     String
  organization_type        OrganizationType         @relation(fields: [organization_type_id], references: [id])
  organization_type_id     Int
  elections                Election[]
  organization_users       OrganizationUser[]
  organization_invitations OrganizationInvitation[]
  lists                    List[]
}

model OrganizationType {
  id           Int            @id @default(autoincrement())
  type         String
  organization Organization[]
}

model OrganizationUser {
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  user            User         @relation(fields: [user_id], references: [id])
  user_id         String
  role            Role         @default(VOTER)

  @@id([organization_id, user_id])
}

model OrganizationInvitation {
  id              String       @id @default(uuid())
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  slug            String
  invite_state    InviteState  @default(PENDING)
  user            User?        @relation(fields: [user_id], references: [id])
  user_id         String?
  role            Role?        @default(VOTER)
  created_at      DateTime
  updated_at      DateTime
}

enum InviteState {
  PENDING
  ACCEPTED
  DECLINED
}

enum Role {
  ADMINISTRATOR
  VOTER
}

model User {
  id                       String                   @id @default(uuid())
  name                     String
  cpr_number               String
  address                  Address                  @relation(fields: [address_id], references: [id])
  address_id               String
  organization_users       OrganizationUser[]
  organization_invitations OrganizationInvitation[]
  ballots                  Ballot[]
}

model Address {
  id                String  @id @default(uuid())
  address_line_1    String
  address_line_2    String?
  district_code     String
  district_name     String
  municipality_code Int
  country           String
  Users             User[]
}

model Proposition {
  id            String   @id @default(uuid())
  election      Election @relation(fields: [election_id], references: [id])
  election_id   String
  name          String
  description   String?
  list          List?    @relation(fields: [list_id], references: [id])
  list_id       String?
  list_priority Int?
}

model List {
  id              String        @id @default(uuid())
  name            String
  abbreviation    String?
  description     String?
  organization    Organization  @relation(fields: [organization_id], references: [id])
  organization_id String
  propositions    Proposition[]
}

model Ballot {
  id           String      @id @default(uuid())
  election     Election    @relation(fields: [election_id], references: [id])
  election_id  String
  ballot_state BallotState @default(PENDING)
  user         User        @relation(fields: [user_id], references: [id])
  user_id      String
  used_at      DateTime?
}

enum BallotState {
  PENDING
  VOTED_IN_PERSON
  VOTED_MAIL_IN
  VOTED_ELECTRONICALLY
}

model Vote {
  id                String   @id @default(uuid())
  election          Election @relation(fields: [election_id], references: [id])
  election_id       String
  voted_at          DateTime @default(now())
  ballot_proof      String
  proposition_proof String
  validation_proof  String
}
