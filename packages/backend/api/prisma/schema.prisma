generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Elections {
  id           String         @id @default(uuid())
  team         Teams          @relation(fields: [team_id], references: [id])
  team_id      String
  name         String
  slug         String
  description  String?
  start_at     DateTime
  end_at       DateTime?
  propositions Propositions[]
  ballots      Ballots[]
  votes        Votes[]
}

model Teams {
  id          String        @id @default(uuid())
  name        String
  slug        String
  elections   Elections[]
  members     TeamMembers[]
  invitations Invitations[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model TeamMembers {
  id         String        @id @default(uuid())
  team       Teams         @relation(fields: [team_id], references: [id])
  team_id    String
  user       Users         @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
  Invitation Invitations[]
}

model Invitations {
  id                   String      @id @default(uuid())
  team                 Teams       @relation(fields: [team_id], references: [id])
  team_id              String
  invited_by_member    TeamMembers @relation(fields: [invited_by_member_id], references: [id])
  invited_by_member_id String
  email                String
  token                String      @unique
  is_admin             Boolean     @default(false)
  created_at           DateTime    @default(now())
  updated_at           DateTime?   @updatedAt
}

enum InviteStates {
  PENDING
  ACCEPTED
  DECLINED
}

model Users {
  id           String        @id @default(uuid())
  principal_id String        @unique
  name         String
  email        String        @unique
  member_of    TeamMembers[]
  ballots      Ballots[]
}

model Propositions {
  id          String    @id @default(uuid())
  election    Elections @relation(fields: [election_id], references: [id])
  election_id String
  name        String
  description String?
}

model Ballots {
  id          String    @id @default(uuid())
  election    Elections @relation(fields: [election_id], references: [id])
  election_id String
  user        Users     @relation(fields: [user_id], references: [id])
  user_id     String
  is_used     Boolean   @default(false)
  used_at     DateTime?
}

model Votes {
  id                String    @id @default(uuid())
  election          Elections @relation(fields: [election_id], references: [id])
  election_id       String
  created_at        DateTime  @default(now())
  ballot_proof      String    @unique
  proposition_proof String    @unique
  validation_proof  String    @unique
}
